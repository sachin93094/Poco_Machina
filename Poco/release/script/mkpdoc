#! /bin/sh
#
# $Id: //poco/1.4/release/script/mkpdoc#4 $
#
# mkdoc
#
# Create reference documentation for a POCO release.
# This is a wrapper for mkdocumentation that syncs to the
# Perforce head revision, reads the current
# version from $POCO_BASE/PLATFORM_VERSION and requires a release
# specification (loaded from $POCO_BASE/release/spec/*.release)
# as argument.
#
# usage: mkdoc [-l <perforce-label>] [<specfile>]
#

if [ "$POCO_BASE" = "" ] ; then
  echo "Error: POCO_BASE not set."
  exit 1
fi

label=""
spec=""
sync="yes"
docConfig=$POCO_BASE/PocoDoc/cfg/mkdocumentation.xml
while [ "$1" != "" ] ; 
do
	if [ "$1" = "-l" ] ; then
		shift
		label=@$1
		shift
	elif [ "$1" = "-C" ] ; then
		shift
		docConfig=$1
		shift
	elif [ "$1" = "-v" ] ; then
		shift
		version=$1
		shift
	elif [ "$1" = "-N" ] ; then
		sync="no"
		shift
	else
		spec=$1
		shift
	fi
done

if [ "$spec" != "" ] ; then
  relspec="-f release/spec/${spec}.release"
  tag="-$spec"
  reltag="-t $spec"
else
  relspec=""
  reltag=""
  tag=""
fi

cd $POCO_BASE

#
# Sync files
#
if [ $sync = "yes" ] ; then
	echo "Syncing files..."
	p4 sync ./...$label
fi

if [ ! -f PLATFORM_VERSION ] ; then
  echo "Error: No PLATFORM_VERSION file found."
  exit 2
fi

if [ "$version" = "" ] ; then
	read version <$POCO_BASE/PLATFORM_VERSION
fi
release=$version$tag

#
# Build release
#

echo "Building tools"

tools=$POCO_BASE/stage/tools
rm -rf $tools
mkdir -p $tools
mkrelease -o $tools $version CppParser PocoDoc

cd $tools
./configure --no-tests --no-samples
make -s -j8
cd $POCO_BASE

osname=`uname -s | tr ' ' '_'`
osarch=`uname -m | tr ' ' '_'`

if [ $osname = "Darwin" ] ; then
	archpath=`dirname stage/tools/PocoDoc/bin/Darwin/*/PocoDoc`
	osarch=`basename $archpath`
fi
export PATH=$tools/PocoDoc/bin/$osname/$osarch:$PATH

echo "Building documentation $release (using $docConfig)"
mkdocumentation -u $reltag $relspec -C $docConfig -v $version
