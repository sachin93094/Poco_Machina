#
# winbuild.sh
#
# Include (source) this script in another script
# to copy and build the POCO sources using Visual Studio.
#
# This script will create a batch file containing build commands
# and then run that batch file.
#
# Variables:
#   $POCO_BASE: POCO base directory (e.g., "/cygdrive/p/poco-1.2")
#   $build:     build directory (e.g., "/cygdrive/p/poco-1.2/stage/build/vs71)
#   $comps:     list of components to build (e.g., "Foundation XML Util Net")
#   $vcversion: Visual Studio version to use ("vs71" or "vs80")
#   $platform:  Target platform ("Win32" or "x64")


vs71env="$VS71COMNTOOLS\\vsvars32.bat"
vs80env="$VS80COMNTOOLS\\vsvars32.bat"
vs90env="$VS90COMNTOOLS\\vsvars32.bat"
vs100env="$VS100COMNTOOLS\\vsvars32.bat"
vs110env="$VS110COMNTOOLS\\vsvars32.bat"

if [ "$vcversion" = "71" ] ; then
  vsenv="$vs71env"
elif [ "$vcversion" = "80" ] ; then
  vsenv="$vs80env"
elif [ "$vcversion" = "90" ] ; then
  vsenv="$vs90env"
elif [ "$vcversion" = "100" ] ; then
  vsenv="$vs100env"
elif [ "$vcversion" = "110" ] ; then
  vsenv="$vs110env"
fi


# Create components file
for comp in $comps ;
do
	echo $comp >>$build/components
done
# Fix line endings
if [ -x /usr/bin/unix2dos ] ; then
	/usr/bin/unix2dos $build/components
fi
cp $POCO_BASE/dist/buildwin.cmd $build/buildwin.cmd
chmod +rwx $build/buildwin.cmd


#
# Create Visual Studio build script
#
cat >$build/build.cmd <<ENDOFSCRIPT
@echo off

rem
rem build.cmd
rem
rem autogenerated command-line build script for vs$vcversion
rem

echo Setting Visual Studio environment for VS$vcversion
call "$vsenv"

set POCOBASE=%CD%
set PATH=%POCOBASE%\\bin;%PATH%

echo INCLUDE=%INCLUDE%
echo LIB=%LIB%
echo PATH=%PATH%

buildwin.cmd $vcversion build all both $platform samples
ENDOFSCRIPT


#
# Fix line endings
#
if [ -x /usr/bin/unix2dos ] ; then
	/usr/bin/unix2dos $build/build.cmd
fi


#
# Build projects
#
echo "Building..."
basedir=`pwd`
cd $build
cmd /c build.cmd
cd $basedir
